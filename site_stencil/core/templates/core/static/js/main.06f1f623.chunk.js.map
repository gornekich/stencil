{"version":3,"sources":["Reducers/CombineReducers.js","Lib/thematize.js","Components/Header/index.jsx","Components/ImageLoader/index.jsx","Components/BackendTest/index.jsx","Test.jsx","serviceWorker.js","index.js","Components/Header/Header.module.scss"],"names":["reducer","combineReducers","theme","styles","classname","mods","classmods","Object","keys","map","mod","value","undefined","concat","filter","str","length","toConsumableArray","classnamesGen","arguments","clsName","join","Component","BackendTest","react_default","a","createElement","onClick","fetch","method","headers","X-CSRFToken","Cookies","get","body","then","res","console","log","store","createStore","applyMiddleware","thunk","Test","react_redux_es","Components_BackendTest","Boolean","window","location","hostname","match","ReactDOM","render","src_Test","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","container","title"],"mappings":"6NAMeA,EAJCC,YAAgB,YCuCxB,SAASC,EAAMC,EAAQC,GAC5B,OA3BK,SAAuBA,EAAWC,GACvC,IAAMC,EAAYC,OAAOC,KAAKH,GAAMI,IAAI,SAACC,GACvC,IAAMC,EAAQN,EAAKK,GAWnB,OARc,IAAVC,QAA6BC,IAAVD,EACV,IACQ,IAAVA,EACD,GAAAE,OAAMT,EAAN,KAAAS,OAAmBH,GAEnB,GAAAG,OAAMT,EAAN,KAAAS,OAAmBH,EAAnB,KAAAG,OAA0BF,KAInCG,OAAO,SAAAC,GAAG,OAAIA,EAAIC,SAErB,OAAQZ,GAARS,OAAAN,OAAAU,EAAA,EAAAV,CAAsBD,IAWfY,CAAcd,EAD6Be,UAAAH,OAAA,QAAAJ,IAAAO,UAAA,GAAAA,UAAA,GAAJ,IACRV,IAAI,SAAAW,GAAO,OAAIjB,EAAOiB,KAAUC,KAAK,KAQ9D,IAAUlB,uBC7CFA,8CCSEmB,4BCQXC,EAnBK,WAYlB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAbK,WACfC,MAAM,gBAAiB,CACrBC,OAAQ,OACRC,QAAS,CACPC,cAAeC,IAAQC,IAAI,cAE7BC,KAAM,gBAEPC,KAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAKvB,SCPAG,EAAQC,YAAYxC,EAASyC,YAAgBC,MASpCC,EAPF,kBACXnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAUL,MAAOA,GAEff,EAAAC,EAAAC,cAACmB,EAAD,QCHgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkBC,UAAA,0BAAAC,MAAA","file":"static/js/main.06f1f623.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nconst reducer = combineReducers({\n  //test\n});\n\nexport default reducer;","/**\n * Generates BEM-like classnames\n * @example\n *\n * classnamesGen('container', {\n  *   visible: true,\n  *   width: 'auto',\n  *   sticked: false\n  * });\n  * // => ['container', 'container_visible', 'container_width_auto']\n  *\n  * @param {string} classname\n  * @param {Object} mods\n  * @returns {Array.<string>}\n  */\n export function classnamesGen(classname, mods) {\n   const classmods = Object.keys(mods).map((mod) => {\n     const value = mods[mod];\n     let classmod;\n \n     if (value === false || value === undefined) {\n       classmod = '';\n     } else if (value === true) {\n       classmod = `${classname}_${mod}`;\n     } else {\n       classmod = `${classname}_${mod}_${value}`;\n     }\n \n     return classmod;\n   }).filter(str => str.length);\n \n   return [classname, ...classmods];\n }\n \n /**\n  * Returns matching styles from stylesheet\n  * @param {Object.<string, string>} styles\n  * @param {string} classname\n  * @param {Object} mods\n  * @returns {string}\n  */\n export function theme(styles, classname, mods = {}) {\n   return classnamesGen(classname, mods).map(clsName => styles[clsName]).join(' ');\n }\n \n /**\n  * Returns theme\n  * @param {Object} styles\n  * @returns {function(): string}\n  */\n export default function (styles) {\n   return (classname, mods) => theme(styles, classname, mods);\n }","import React from 'react';\n\nimport thematize from 'Lib/thematize';\nimport styles from './Header.module.scss';\n\nconst theme = thematize(styles);\n\nconst Header = ({ title }) => (\n  <div className={styles.container}>\n    <div className={theme('title')}>{title}</div>\n  </div>\n);\n\nexport default Header;\n","import React, { Component } from 'react';\n\n/*const ImageLoader = () => {\n  const handleSelectFile = event => {\n    console.log(event.target.files[0]);\n  };\n  return (\n    <div>\n      <input type=\"file\" name=\"\" id=\"\" onChange={handleSelectFile} />\n      <button>Upload</button>\n    </div>\n  );\n};*/\n\nclass ImageLoader extends Component {\n  state = {\n    image: null\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      image: URL.createObjectURL(event.target.files[0])\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <input type=\"file\" accept=\"image/*\" onChange={this.handleChange} />\n        {this.state.image && <img src={this.state.image} />}\n      </div>\n    )\n  }\n}\n\nexport default ImageLoader;\n","import React from 'react';\nimport Cookies from 'js-cookie';\n\nconst BackendTest = () => {\n  const sendPost = () => {\n    fetch('/core/process', {\n      method: 'POST',\n      headers: {\n        \"X-CSRFToken\": Cookies.get('csrftoken')\n      },\n      body: 'fuck Nekich'\n    })\n    .then(res => console.log(res))\n  }\n\n  return (\n    <div>\n      <button onClick={sendPost}>GO!</button>\n    </div>\n  )\n}\n\nexport default BackendTest;","import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport reducer from 'Reducers/CombineReducers';\nimport Header from 'Components/Header';\nimport ImageLoader from 'Components/ImageLoader';\nimport Back from 'Components/BackendTest';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst Test = () => (\n  <Provider store={store}>\n    {/*<Header title={'Stencil by nikigor!'} />*/}\n    <Back />\n  </Provider>\n);\n\nexport default Test;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Test from './Test';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Test />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__3c-2_\",\"title\":\"Header_title__KgqiE\"};"],"sourceRoot":""}